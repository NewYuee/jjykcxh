<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ljy.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.ljy.entity.Comment" >
    <id column="comment_id" property="commentId" jdbcType="INTEGER" />
    <result column="comment_context" property="commentContext" jdbcType="VARCHAR" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="album_id" property="albumId" jdbcType="INTEGER" />
    <result column="replied_comment_id" property="repliedCommentId" jdbcType="INTEGER" />
    <result column="news_id" property="newsId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    comment_id, comment_context, update_time, album_id, replied_comment_id, news_id, 
    user_id
  </sql>
  <select id="getCommentsByAlbumId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select *
    from comment
    where album_id=#{albumId} and replied_comment_id is null
    order by update_time desc ;
  </select>
  <select id="getReplyCommentById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select *
    from comment
    where replied_comment_id=#{commentId}
    order by update_time desc ;
  </select>
  <select id="getComment1" resultMap="BaseResultMap">
    SELECT  * from comment ORDER BY update_time DESC LIMIT 1;
  </select>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ljy.entity.CommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by update_time desc
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from comment
    where comment_id = #{commentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ljy.entity.CommentExample" >
    delete from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ljy.entity.Comment" >
    insert into comment (comment_id, comment_context, update_time, 
      album_id, replied_comment_id, news_id, 
      user_id)
    values (#{commentId,jdbcType=INTEGER}, #{commentContext,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{albumId,jdbcType=INTEGER}, #{repliedCommentId,jdbcType=INTEGER}, #{newsId,jdbcType=INTEGER}, 
      #{userId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ljy.entity.Comment" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="commentContext != null" >
        comment_context,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="albumId != null" >
        album_id,
      </if>
      <if test="repliedCommentId != null" >
        replied_comment_id,
      </if>
      <if test="newsId != null" >
        news_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=INTEGER},
      </if>
      <if test="commentContext != null" >
        #{commentContext,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="albumId != null" >
        #{albumId,jdbcType=INTEGER},
      </if>
      <if test="repliedCommentId != null" >
        #{repliedCommentId,jdbcType=INTEGER},
      </if>
      <if test="newsId != null" >
        #{newsId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ljy.entity.CommentExample" resultType="java.lang.Integer" >
    select count(*) from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update comment
    <set >
      <if test="record.commentId != null" >
        comment_id = #{record.commentId,jdbcType=INTEGER},
      </if>
      <if test="record.commentContext != null" >
        comment_context = #{record.commentContext,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.albumId != null" >
        album_id = #{record.albumId,jdbcType=INTEGER},
      </if>
      <if test="record.repliedCommentId != null" >
        replied_comment_id = #{record.repliedCommentId,jdbcType=INTEGER},
      </if>
      <if test="record.newsId != null" >
        news_id = #{record.newsId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update comment
    set comment_id = #{record.commentId,jdbcType=INTEGER},
      comment_context = #{record.commentContext,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      album_id = #{record.albumId,jdbcType=INTEGER},
      replied_comment_id = #{record.repliedCommentId,jdbcType=INTEGER},
      news_id = #{record.newsId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ljy.entity.Comment" >
    update comment
    <set >
      <if test="commentContext != null" >
        comment_context = #{commentContext,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="albumId != null" >
        album_id = #{albumId,jdbcType=INTEGER},
      </if>
      <if test="repliedCommentId != null" >
        replied_comment_id = #{repliedCommentId,jdbcType=INTEGER},
      </if>
      <if test="newsId != null" >
        news_id = #{newsId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ljy.entity.Comment" >
    update comment
    set comment_context = #{commentContext,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      album_id = #{albumId,jdbcType=INTEGER},
      replied_comment_id = #{repliedCommentId,jdbcType=INTEGER},
      news_id = #{newsId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER}
    where comment_id = #{commentId,jdbcType=INTEGER}
  </update>
  <select id="getCommentByNewsId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select comment_id, comment_context, update_time, album_id, replied_comment_id, news_id, user_id
    from comment
    WHERE news_id=#{id}
    order by update_time desc
  </select>
  <delete id="deletCommentById" parameterType="java.lang.Integer">
    delete from comment where comment_id=#{id} or replied_comment_id=#{id}
  </delete>
</mapper>